{"version":3,"sources":["logo.svg","Three/threeExample.jsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["ThreeExample","mountRef","useRef","useEffect","scene","THREE","camera","window","innerWidth","innerHeight","renderer","setSize","current","appendChild","domElement","handleResize","aspect","updateProjectionMatrix","render","geometry","material","color","cube","add","position","z","animate","requestAnimationFrame","rotation","x","y","mRef","addEventListener","removeChild","removeEventListener","ref","App","className","src","logo","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"wMAAe,G,MAAA,IAA0B,kC,sBCyD1BA,EAtDM,WACnB,IAAMC,EAAWC,iBAAO,MAkDxB,OAhDAC,qBAAU,WACR,IAAIC,EAAQ,IAAIC,IACZC,EAAS,IAAID,IACf,GACAE,OAAOC,WAAaD,OAAOE,YAC3B,GACA,KAEEC,EAAW,IAAIL,IACnBK,EAASC,QAAQJ,OAAOC,WAAYD,OAAOE,aAE3CR,EAASW,QAAQC,YAAYH,EAASI,YAEtC,IAIMC,EAAe,WACnBL,EAASC,QAAQJ,OAAOC,WAAYD,OAAOE,aAC3CH,EAAOU,OAAST,OAAOC,WAAaD,OAAOE,YAC3CH,EAAOW,yBANPP,EAASQ,OAAOd,EAAOE,IAUrBa,EAAW,IAAId,IAAkB,EAAG,EAAG,GACvCe,EAAW,IAAIf,IAAwB,CAAEgB,MAAO,WAChDC,EAAO,IAAIjB,IAAWc,EAAUC,GACpChB,EAAMmB,IAAID,GACVhB,EAAOkB,SAASC,EAAI,GAEN,SAAVC,IACFC,sBAAsBD,GACtBJ,EAAKM,SAASC,GAAK,IACnBP,EAAKM,SAASE,GAAK,IACnBpB,EAASQ,OAAOd,EAAOE,GAGzBoB,GACA,IAAIK,EAAO9B,EAASW,QAIpB,OAFAL,OAAOyB,iBAAiB,SAAUjB,GAAc,GAEzC,WACLgB,EAAKE,YAAYvB,EAASI,YAC1BP,OAAO2B,oBAAoB,SAAUnB,MAEtC,IAEI,qBAAKoB,IAAKlC,KCrCJmC,MAZf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,oDACA,cAAC,EAAD,UCGOC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAAShC,OACP,cAAC,IAAMiC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.6c917da7.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import * as THREE from \"three\";\r\nimport { useRef, useEffect } from \"react\";\r\n\r\nconst ThreeExample = () => {\r\n  const mountRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    var scene = new THREE.Scene();\r\n    var camera = new THREE.PerspectiveCamera(\r\n      75,\r\n      window.innerWidth / window.innerHeight,\r\n      0.1,\r\n      1000\r\n    );\r\n    var renderer = new THREE.WebGLRenderer();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n    mountRef.current.appendChild(renderer.domElement);\r\n\r\n    const renderScene = () => {\r\n      renderer.render(scene, camera);\r\n    };\r\n\r\n    const handleResize = () => {\r\n      renderer.setSize(window.innerWidth, window.innerHeight);\r\n      camera.aspect = window.innerWidth / window.innerHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderScene();\r\n    };\r\n\r\n    var geometry = new THREE.BoxGeometry(1, 1, 1);\r\n    var material = new THREE.MeshBasicMaterial({ color: 0x9b34eb });\r\n    var cube = new THREE.Mesh(geometry, material);\r\n    scene.add(cube);\r\n    camera.position.z = 5;\r\n\r\n    var animate = function () {\r\n      requestAnimationFrame(animate);\r\n      cube.rotation.x += 0.01;\r\n      cube.rotation.y += 0.01;\r\n      renderer.render(scene, camera);\r\n    };\r\n\r\n    animate();\r\n    let mRef = mountRef.current;\r\n\r\n    window.addEventListener(\"resize\", handleResize, false);\r\n\r\n    return () => {\r\n      mRef.removeChild(renderer.domElement);\r\n      window.removeEventListener(\"resize\", handleResize);\r\n    };\r\n  }, []);\r\n\r\n  return <div ref={mountRef} />;\r\n};\r\n\r\nexport default ThreeExample;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport ThreeExample from \"./Three/threeExample\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>EXPERIENCE THE Cube</p>\n        <ThreeExample />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}